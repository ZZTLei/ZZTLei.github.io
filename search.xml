<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Python开发s19文件处理工具</title>
      <link href="/2025/02/16/%E5%9F%BA%E4%BA%8EPython%E5%BC%80%E5%8F%91s19%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/02/16/%E5%9F%BA%E4%BA%8EPython%E5%BC%80%E5%8F%91s19%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<hr><p>以下是一篇完整的Hexo博客内容，您可以直接部署到GitHub Pages。包含完整代码实现与开发详解：</p><hr><h1 id="基于Python的工业级S19文件处理工具开发全解"><a href="#基于Python的工业级S19文件处理工具开发全解" class="headerlink" title="基于Python的工业级S19文件处理工具开发全解"></a>基于Python的工业级S19文件处理工具开发全解</h1><h2 id="一、S19文件格式深度解析"><a href="#一、S19文件格式深度解析" class="headerlink" title="一、S19文件格式深度解析"></a>一、S19文件格式深度解析</h2><h3 id="1-1-文件结构规范"><a href="#1-1-文件结构规范" class="headerlink" title="1.1 文件结构规范"></a>1.1 文件结构规范</h3><p>Motorola S-record格式由若干ASCII文本行组成，每行对应一个记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S3157A12000102030405060708090A0B0C0D0E0F1072</span><br><span class="line">└┬┘└┬┘└────┬────┘└─────────┬─────────┘└┬┘</span><br><span class="line"> │  │   地址域         数据域      校验和</span><br><span class="line"> │ 记录长度</span><br><span class="line">记录类型</span><br></pre></td></tr></table></figure><h3 id="1-2-记录类型对照表"><a href="#1-2-记录类型对照表" class="headerlink" title="1.2 记录类型对照表"></a>1.2 记录类型对照表</h3><table><thead><tr><th>类型</th><th>地址长度</th><th>说明</th></tr></thead><tbody><tr><td>S0</td><td>2字节</td><td>头记录，包含文件标识</td></tr><tr><td>S1</td><td>2字节</td><td>16位地址数据记录</td></tr><tr><td>S2</td><td>3字节</td><td>24位地址数据记录</td></tr><tr><td>S3</td><td>4字节</td><td>32位地址数据记录</td></tr><tr><td>S5</td><td>2字节</td><td>记录计数器</td></tr><tr><td>S7&#x2F;S8&#x2F;S9</td><td>4&#x2F;3&#x2F;2字节</td><td>终止记录</td></tr></tbody></table><h3 id="1-3-校验和算法"><a href="#1-3-校验和算法" class="headerlink" title="1.3 校验和算法"></a>1.3 校验和算法</h3><p>校验和计算遵循以下公式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksum = <span class="number">0xFF</span> - (<span class="built_in">sum</span>(all_bytes) &amp; <span class="number">0xFF</span>)</span><br></pre></td></tr></table></figure><h2 id="二、工具架构设计"><a href="#二、工具架构设计" class="headerlink" title="二、工具架构设计"></a>二、工具架构设计</h2><h3 id="2-1-系统架构图"><a href="#2-1-系统架构图" class="headerlink" title="2.1 系统架构图"></a>2.1 系统架构图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[CLI接口] --&gt; B[文件处理器]</span><br><span class="line">    B --&gt; C[地址空间管理器]</span><br><span class="line">    C --&gt; D[记录解析器]</span><br><span class="line">    D --&gt; E[二进制IO]</span><br></pre></td></tr></table></figure><h3 id="2-2-类关系图"><a href="#2-2-类关系图" class="headerlink" title="2.2 类关系图"></a>2.2 类关系图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class S19Record&#123;</span><br><span class="line">        +parse()</span><br><span class="line">        +generate()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class AddressBlock&#123;</span><br><span class="line">        +merge()</span><br><span class="line">        +split()</span><br><span class="line">        +modify()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class S19Processor&#123;</span><br><span class="line">        +load()</span><br><span class="line">        +save()</span><br><span class="line">        +process()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    S19Processor &quot;1&quot; *-- &quot;0..*&quot; AddressBlock</span><br><span class="line">    AddressBlock &quot;1&quot; *-- &quot;0..*&quot; S19Record</span><br></pre></td></tr></table></figure><h2 id="三、完整代码实现"><a href="#三、完整代码实现" class="headerlink" title="三、完整代码实现"></a>三、完整代码实现</h2><h3 id="3-1-核心模块代码"><a href="#3-1-核心模块代码" class="headerlink" title="3.1 核心模块代码"></a>3.1 核心模块代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">s19_processor.py - Advanced S19 file processor</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S19Record</span>:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">str</span></span><br><span class="line">    address: <span class="built_in">int</span></span><br><span class="line">    data: <span class="built_in">bytes</span></span><br><span class="line">    checksum: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    RECORD_INFO = &#123;</span><br><span class="line">        <span class="string">&#x27;S0&#x27;</span>: (<span class="number">2</span>, <span class="string">&#x27;Header&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S1&#x27;</span>: (<span class="number">2</span>, <span class="string">&#x27;Data16&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S2&#x27;</span>: (<span class="number">3</span>, <span class="string">&#x27;Data24&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S3&#x27;</span>: (<span class="number">4</span>, <span class="string">&#x27;Data32&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S5&#x27;</span>: (<span class="number">2</span>, <span class="string">&#x27;Count&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S7&#x27;</span>: (<span class="number">4</span>, <span class="string">&#x27;Term32&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S8&#x27;</span>: (<span class="number">3</span>, <span class="string">&#x27;Term24&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;S9&#x27;</span>: (<span class="number">2</span>, <span class="string">&#x27;Term16&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">cls, line: <span class="built_in">str</span></span>) -&gt; <span class="string">&#x27;S19Record&#x27;</span>:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.startswith(<span class="string">&#x27;S&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid S-record&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        rec_type = line[:<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> rec_type <span class="keyword">not</span> <span class="keyword">in</span> cls.RECORD_INFO:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unsupported record type: <span class="subst">&#123;rec_type&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        addr_len, _ = cls.RECORD_INFO[rec_type]</span><br><span class="line">        payload = <span class="built_in">bytes</span>.fromhex(line[<span class="number">2</span>:])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(payload) &lt; (addr_len + <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Incomplete payload&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        length = payload[<span class="number">0</span>]</span><br><span class="line">        address = <span class="built_in">int</span>.from_bytes(payload[<span class="number">1</span>:<span class="number">1</span>+addr_len], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        data = payload[<span class="number">1</span>+addr_len:-<span class="number">1</span>]</span><br><span class="line">        checksum = payload[-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Validate checksum</span></span><br><span class="line">        calc_checksum = <span class="number">0xFF</span> - (<span class="built_in">sum</span>(payload[:-<span class="number">1</span>]) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> checksum != calc_checksum:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Checksum mismatch at <span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cls(rec_type, address, data, checksum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        addr_len, _ = <span class="variable language_">self</span>.RECORD_INFO[<span class="variable language_">self</span>.<span class="built_in">type</span>]</span><br><span class="line">        addr_bytes = <span class="variable language_">self</span>.address.to_bytes(addr_len, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        payload = <span class="built_in">bytes</span>([<span class="built_in">len</span>(<span class="variable language_">self</span>.data) + addr_len + <span class="number">1</span>]) + addr_bytes + <span class="variable language_">self</span>.data</span><br><span class="line">        checksum = <span class="number">0xFF</span> - (<span class="built_in">sum</span>(payload) &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.<span class="built_in">type</span>&#125;</span><span class="subst">&#123;payload.<span class="built_in">hex</span>().upper()&#125;</span><span class="subst">&#123;checksum:02X&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddressSpace</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start: <span class="built_in">int</span>, data: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.start = start</span><br><span class="line">        <span class="variable language_">self</span>.end = start + <span class="built_in">len</span>(data) - <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.data = <span class="built_in">bytearray</span>(data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, other: <span class="string">&#x27;AddressSpace&#x27;</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.end + <span class="number">1</span> == other.start:</span><br><span class="line">            <span class="variable language_">self</span>.data += other.data</span><br><span class="line">            <span class="variable language_">self</span>.end = other.end</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> other.end + <span class="number">1</span> == <span class="variable language_">self</span>.start:</span><br><span class="line">            <span class="variable language_">self</span>.data = other.data + <span class="variable language_">self</span>.data</span><br><span class="line">            <span class="variable language_">self</span>.start = other.start</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">self, start: <span class="built_in">int</span>, data: <span class="built_in">bytes</span>, mode: <span class="built_in">str</span> = <span class="string">&#x27;overwrite&#x27;</span></span>):</span><br><span class="line">        offset = start - <span class="variable language_">self</span>.start</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="string">&#x27;fill&#x27;</span> <span class="keyword">and</span> <span class="variable language_">self</span>.data[offset+i] != <span class="number">0xFF</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="variable language_">self</span>.data[offset+i] = data[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S19Processor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.blocks: <span class="type">List</span>[AddressSpace] = []</span><br><span class="line">        <span class="variable language_">self</span>.header: S19Record = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.terminator: S19Record = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, file_path: <span class="built_in">str</span></span>):</span><br><span class="line">        current_block = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                rec = S19Record.parse(line)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> rec.<span class="built_in">type</span> == <span class="string">&#x27;S0&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.header = rec</span><br><span class="line">                <span class="keyword">elif</span> rec.<span class="built_in">type</span> <span class="keyword">in</span> (<span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>):</span><br><span class="line">                    new_block = AddressSpace(rec.address, rec.data)</span><br><span class="line">                    merged = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">for</span> blk <span class="keyword">in</span> <span class="variable language_">self</span>.blocks:</span><br><span class="line">                        <span class="keyword">if</span> blk.merge(new_block):</span><br><span class="line">                            merged = <span class="literal">True</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> merged:</span><br><span class="line">                        <span class="variable language_">self</span>.blocks.append(new_block)</span><br><span class="line">                <span class="keyword">elif</span> rec.<span class="built_in">type</span> <span class="keyword">in</span> (<span class="string">&#x27;S7&#x27;</span>, <span class="string">&#x27;S8&#x27;</span>, <span class="string">&#x27;S9&#x27;</span>):</span><br><span class="line">                    <span class="variable language_">self</span>.terminator = rec</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.blocks.sort(key=<span class="keyword">lambda</span> x: x.start)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">erase</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span>, fill: <span class="built_in">int</span> = <span class="number">0xFF</span></span>):</span><br><span class="line">        targets = [blk <span class="keyword">for</span> blk <span class="keyword">in</span> <span class="variable language_">self</span>.blocks <span class="keyword">if</span> blk.end &gt;= start <span class="keyword">and</span> blk.start &lt;= end]</span><br><span class="line">        new_blocks = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> blk <span class="keyword">in</span> targets:</span><br><span class="line">            <span class="comment"># Split left</span></span><br><span class="line">            <span class="keyword">if</span> blk.start &lt; start:</span><br><span class="line">                left = AddressSpace(blk.start, blk.data[:start-blk.start])</span><br><span class="line">                new_blocks.append(left)</span><br><span class="line">                blk = AddressSpace(start, blk.data[start-blk.start:])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Split right</span></span><br><span class="line">            <span class="keyword">if</span> blk.end &gt; end:</span><br><span class="line">                right = AddressSpace(end+<span class="number">1</span>, blk.data[end+<span class="number">1</span>-blk.start:])</span><br><span class="line">                new_blocks.append(right)</span><br><span class="line">                blk = AddressSpace(blk.start, blk.data[:end+<span class="number">1</span>-blk.start])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Modify</span></span><br><span class="line">            blk.modify(<span class="built_in">max</span>(start, blk.start), <span class="built_in">bytes</span>([fill]*(end-start+<span class="number">1</span>)))</span><br><span class="line">            new_blocks.append(blk)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.blocks = [blk <span class="keyword">for</span> blk <span class="keyword">in</span> <span class="variable language_">self</span>.blocks <span class="keyword">if</span> blk <span class="keyword">not</span> <span class="keyword">in</span> targets] + new_blocks</span><br><span class="line">        <span class="variable language_">self</span>.blocks.sort(key=<span class="keyword">lambda</span> x: x.start)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, output_path: <span class="built_in">str</span>, rec_type: <span class="built_in">str</span> = <span class="string">&#x27;S3&#x27;</span>, align: <span class="built_in">int</span> = <span class="number">32</span></span>):</span><br><span class="line">        records = []</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.header:</span><br><span class="line">            records.append(<span class="variable language_">self</span>.header.generate())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> blk <span class="keyword">in</span> <span class="variable language_">self</span>.blocks:</span><br><span class="line">            addr = blk.start</span><br><span class="line">            data = blk.data</span><br><span class="line">            <span class="keyword">while</span> data:</span><br><span class="line">                chunk = data[:align]</span><br><span class="line">                data = data[align:]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># Auto select record type</span></span><br><span class="line">                final_type = rec_type</span><br><span class="line">                <span class="keyword">if</span> addr &lt;= <span class="number">0xFFFF</span> <span class="keyword">and</span> rec_type <span class="keyword">in</span> (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;S3&#x27;</span>):</span><br><span class="line">                    final_type = <span class="string">&#x27;S1&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> addr &lt;= <span class="number">0xFFFFFF</span> <span class="keyword">and</span> rec_type == <span class="string">&#x27;S3&#x27;</span>:</span><br><span class="line">                    final_type = <span class="string">&#x27;S2&#x27;</span></span><br><span class="line">                </span><br><span class="line">                rec = S19Record(final_type, addr, <span class="built_in">bytes</span>(chunk))</span><br><span class="line">                records.append(rec.generate())</span><br><span class="line">                addr += <span class="built_in">len</span>(chunk)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.terminator:</span><br><span class="line">            records.append(<span class="variable language_">self</span>.terminator.generate())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>.join(records))</span><br><span class="line"></span><br><span class="line"><span class="comment"># CLI Interface</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;S19 File Processor&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;input&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Input S19 file&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;output&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Output S19 file&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--erase&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, metavar=<span class="string">&#x27;START-END&#x27;</span>, </span><br><span class="line">                       <span class="built_in">help</span>=<span class="string">&#x27;Address ranges to erase&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--align&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">32</span>,</span><br><span class="line">                       <span class="built_in">help</span>=<span class="string">&#x27;Alignment length&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    proc = S19Processor()</span><br><span class="line">    proc.load(args.<span class="built_in">input</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.erase:</span><br><span class="line">        <span class="keyword">for</span> range_str <span class="keyword">in</span> args.erase:</span><br><span class="line">            start, end = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x, <span class="number">16</span>), range_str.split(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">            proc.erase(start, end)</span><br><span class="line">    </span><br><span class="line">    proc.save(args.output, align=args.align)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-2-功能验证测试"><a href="#3-2-功能验证测试" class="headerlink" title="3.2 功能验证测试"></a>3.2 功能验证测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 擦除0x1000-0x1FFF区域并保存为S3格式</span></span><br><span class="line">python s19_processor.py input.s19 output.s19 \</span><br><span class="line">    --erase 0x1000-0x1FFF \</span><br><span class="line">    --align 64</span><br></pre></td></tr></table></figure><h2 id="四、关键功能实现解析"><a href="#四、关键功能实现解析" class="headerlink" title="四、关键功能实现解析"></a>四、关键功能实现解析</h2><h3 id="4-1-智能合并算法"><a href="#4-1-智能合并算法" class="headerlink" title="4.1 智能合并算法"></a>4.1 智能合并算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_blocks</span>(<span class="params">blocks: <span class="type">List</span>[AddressSpace]</span>) -&gt; <span class="type">List</span>[AddressSpace]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> blocks:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    sorted_blocks = <span class="built_in">sorted</span>(blocks, key=<span class="keyword">lambda</span> x: x.start)</span><br><span class="line">    merged = [sorted_blocks[<span class="number">0</span>]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> current <span class="keyword">in</span> sorted_blocks[<span class="number">1</span>:]:</span><br><span class="line">        last = merged[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> last.end &gt;= current.start - <span class="number">1</span>:</span><br><span class="line">            merged_data = last.data + current.data</span><br><span class="line">            merged[-<span class="number">1</span>] = AddressSpace(last.start, merged_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merged.append(current)</span><br><span class="line">    <span class="keyword">return</span> merged</span><br></pre></td></tr></table></figure><h3 id="4-2-非覆盖填充实现"><a href="#4-2-非覆盖填充实现" class="headerlink" title="4.2 非覆盖填充实现"></a>4.2 非覆盖填充实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">non_overwrite_fill</span>(<span class="params">block: AddressSpace, pattern: <span class="built_in">bytes</span></span>):</span><br><span class="line">    fill_data = (pattern * (<span class="built_in">len</span>(block.data)//<span class="built_in">len</span>(pattern) + <span class="number">1</span>))[:<span class="built_in">len</span>(block.data)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block.data)):</span><br><span class="line">        <span class="keyword">if</span> block.data[i] == <span class="number">0xFF</span>:</span><br><span class="line">            block.data[i] = fill_data[i]</span><br></pre></td></tr></table></figure><h2 id="五、性能优化方案"><a href="#五、性能优化方案" class="headerlink" title="五、性能优化方案"></a>五、性能优化方案</h2><ol><li><strong>内存映射技术</strong>：使用mmap处理大文件</li><li><strong>并行处理</strong>：多线程处理独立地址块</li><li><strong>缓存机制</strong>：LRU缓存频繁访问块</li><li><strong>增量处理</strong>：仅加载修改区域</li></ol><h2 id="六、应用场景"><a href="#六、应用场景" class="headerlink" title="六、应用场景"></a>六、应用场景</h2><ol><li><strong>固件安全擦除</strong>：擦除敏感数据区域</li><li><strong>配置参数注入</strong>：批量修改设备参数</li><li><strong>格式转换工具</strong>：适配不同编译器输出</li><li><strong>固件合并</strong>：集成Bootloader与应用程序</li></ol><h2 id="七、项目扩展方向"><a href="#七、项目扩展方向" class="headerlink" title="七、项目扩展方向"></a>七、项目扩展方向</h2><ol><li>增加GUI可视化界面</li><li>支持Intel HEX格式</li><li>集成CRC32校验功能</li><li>开发VSCode插件版本</li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> S19 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于周立功开发Python上位机</title>
      <link href="/2025/02/11/%E5%9F%BA%E4%BA%8E%E5%91%A8%E7%AB%8B%E5%8A%9F%E5%BC%80%E5%8F%91Python%E4%B8%8A%E4%BD%8D%E6%9C%BA/"/>
      <url>/2025/02/11/%E5%9F%BA%E4%BA%8E%E5%91%A8%E7%AB%8B%E5%8A%9F%E5%BC%80%E5%8F%91Python%E4%B8%8A%E4%BD%8D%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>背景</strong><br>CANOE的功能强大但是价格昂贵且稀缺, 相对而言周立功功能简单但是价格便宜且常见, 如果能够通过Python拓展周立功的功能, 那就能在一定程度上对CANOE进行平替, 保证开发效率的同时减少开发成本.</p><p><strong>思考</strong><br>1.想要通过Python拓展周立功的功能, 首先需要实现Python对周立功的驱动功能(周立功的启动, 停止, 配置, 发送报文, 接收报文等);<br>2.那应该如何实现Python对周立功的驱动功能呢? 或许可以从以下两方面入手:<br>(1)研究周立功的应用软件ZCANPRO与周立功硬件(CAN盒)的交互协议, 参照这个交互协议使用Python等编写一个周立功的驱动程序, 通过这个驱动程序实现Python上位机对周立功硬件(CAN盒)的控制 (哈哈, 这是一个复杂而庞大的工程, 以后可以研究一下);<br>(2)搜索周立功官网, 社区或是其他网站以确认是否有提供现成的适用于Python的周立功驱动程序, 以避免重复开发, 继而将更多的时间和精力放置Python上位机的应用功能开发上.</p><p><strong>获取驱动程序</strong><br>1.*** <a href="/assets/%E5%9F%BA%E4%BA%8E%E5%91%A8%E7%AB%8B%E5%8A%9F%E5%BC%80%E5%8F%91Python%E4%B8%8A%E4%BD%8D%E6%9C%BA/zlgcan_x86.zip">zlgcan_x86.zip</a> *** 适用于32位的Python运行环境;<br>2.*** <a href="/assets/%E5%9F%BA%E4%BA%8E%E5%91%A8%E7%AB%8B%E5%8A%9F%E5%BC%80%E5%8F%91Python%E4%B8%8A%E4%BD%8D%E6%9C%BA/zlgcan_x64.zip">zlgcan_x64.zip</a> *** 适用于64位的Python运行环境;</p><p><strong>创建上位机工程</strong><br>1.创建一个空文件夹, 以作为上位机工程目录, 将 <em><strong>zlgcan_x86.zip</strong></em>或 <em><strong>zlgcan_x64.zip</strong></em>解压到该目录下;<br><img data-src="/assets/%E5%9F%BA%E4%BA%8E%E5%91%A8%E7%AB%8B%E5%8A%9F%E5%BC%80%E5%8F%91Python%E4%B8%8A%E4%BD%8D%E6%9C%BA/1.png" alt="图1 创建上位机工程"></p><p>2.在上述创建的上位机工程目录下新建<em><strong>zlgcan_tool.py</strong></em>文件, 在该文件中编写上位机代码;<br><img data-src="/assets/%E5%9F%BA%E4%BA%8E%E5%91%A8%E7%AB%8B%E5%8A%9F%E5%BC%80%E5%8F%91Python%E4%B8%8A%E4%BD%8D%E6%9C%BA/2.png" alt="图2 新建zlgcan_tool.py文件用以编写上位机代码"></p><p>3.在 <em><strong>zlgcan_tool.py</strong></em>文件中导入zlgcan模块, 创建相应的打开设备、配置设备、发送数据、接收数据等接口:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">zcan_tool.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module provides functionality for interacting with ZLG CAN/CANFD devices.</span></span><br><span class="line"><span class="string">Supports both standard CAN and CAN FD protocols.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> byref, Structure, c_ubyte, c_uint, c_int, POINTER</span><br><span class="line"><span class="keyword">import</span> zlgcan_x64.zlgcan <span class="keyword">as</span> zlgcan_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import ZCAN_CHANNEL_INIT_CONFIG classes</span></span><br><span class="line"><span class="keyword">from</span> zlgcan_x64.zlgcan <span class="keyword">import</span> ZCAN_CHANNEL_INIT_CONFIG, ZCAN_TYPE_CAN, ZCAN_TYPE_CANFD</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZCANChannelInitConfigFD</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CAN FD channel initialization configuration structure.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        mode (c_ubyte): Operation mode.</span></span><br><span class="line"><span class="string">        filter (c_ubyte): Filter enable.</span></span><br><span class="line"><span class="string">        acc_code (c_uint): Acceptance code.</span></span><br><span class="line"><span class="string">        acc_mask (c_uint): Acceptance mask.</span></span><br><span class="line"><span class="string">        arb_timing0 (c_ubyte): Arbitration segment timer 0.</span></span><br><span class="line"><span class="string">        arb_timing1 (c_ubyte): Arbitration segment timer 1.</span></span><br><span class="line"><span class="string">        data_timing0 (c_ubyte): Data segment timer 0.</span></span><br><span class="line"><span class="string">        data_timing1 (c_ubyte): Data segment timer 1.</span></span><br><span class="line"><span class="string">        samp_point (c_ubyte): Sampling point percentage.</span></span><br><span class="line"><span class="string">        termination (c_ubyte): Termination resistor enable.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;mode&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;filter&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;acc_code&quot;</span>, c_uint),</span><br><span class="line">        (<span class="string">&quot;acc_mask&quot;</span>, c_uint),</span><br><span class="line">        (<span class="string">&quot;arb_timing0&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;arb_timing1&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;data_timing0&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;data_timing1&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;samp_point&quot;</span>, c_ubyte),</span><br><span class="line">        (<span class="string">&quot;termination&quot;</span>, c_ubyte)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mode=<span class="number">0</span>, filter_=<span class="number">0</span>, acc_code=<span class="number">0</span>, acc_mask=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">                 arb_timing0=<span class="number">0</span>, arb_timing1=<span class="number">0</span>, data_timing0=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">                 data_timing1=<span class="number">0</span>, samp_point=<span class="number">0</span>, termination=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">filter</span> = filter_</span><br><span class="line">        <span class="variable language_">self</span>.acc_code = acc_code</span><br><span class="line">        <span class="variable language_">self</span>.acc_mask = acc_mask</span><br><span class="line">        <span class="variable language_">self</span>.arb_timing0 = arb_timing0</span><br><span class="line">        <span class="variable language_">self</span>.arb_timing1 = arb_timing1</span><br><span class="line">        <span class="variable language_">self</span>.data_timing0 = data_timing0</span><br><span class="line">        <span class="variable language_">self</span>.data_timing1 = data_timing1</span><br><span class="line">        <span class="variable language_">self</span>.samp_point = samp_point</span><br><span class="line">        <span class="variable language_">self</span>.termination = termination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZCANChannelInitConfig</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CAN channel initialization configuration structure.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        mode (c_ubyte): Operation mode.</span></span><br><span class="line"><span class="string">        filter (c_ubyte): Filter enable.</span></span><br><span class="line"><span class="string">        acc_code (c_uint): Acceptance code.</span></span><br><span class="line"><span class="string">        acc_mask (c_uint): Acceptance mask.</span></span><br><span class="line"><span class="string">        timing0 (c_ubyte): Arbitration segment timer 0.</span></span><br><span class="line"><span class="string">        timing1 (c_ubyte): Arbitration segment timer 1.</span></span><br><span class="line"><span class="string">        samp_point (c_ubyte): Sampling point percentage.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;mode&quot;</span>, c_ubyte),      <span class="comment"># Operation mode</span></span><br><span class="line">        (<span class="string">&quot;filter&quot;</span>, c_ubyte),    <span class="comment"># Filter enable</span></span><br><span class="line">        (<span class="string">&quot;acc_code&quot;</span>, c_uint),   <span class="comment"># Acceptance code</span></span><br><span class="line">        (<span class="string">&quot;acc_mask&quot;</span>, c_uint),   <span class="comment"># Acceptance mask</span></span><br><span class="line">        (<span class="string">&quot;timing0&quot;</span>, c_ubyte),   <span class="comment"># Arbitration segment timer 0</span></span><br><span class="line">        (<span class="string">&quot;timing1&quot;</span>, c_ubyte),   <span class="comment"># Arbitration segment timer 1</span></span><br><span class="line">        (<span class="string">&quot;samp_point&quot;</span>, c_ubyte) <span class="comment"># Sampling point percentage</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mode=<span class="number">0</span>, filter_=<span class="number">0</span>, acc_code=<span class="number">0</span>, acc_mask=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">                 timing0=<span class="number">0</span>, timing1=<span class="number">0</span>, samp_point=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">filter</span> = filter_</span><br><span class="line">        <span class="variable language_">self</span>.acc_code = acc_code</span><br><span class="line">        <span class="variable language_">self</span>.acc_mask = acc_mask</span><br><span class="line">        <span class="variable language_">self</span>.timing0 = timing0</span><br><span class="line">        <span class="variable language_">self</span>.timing1 = timing1</span><br><span class="line">        <span class="variable language_">self</span>.samp_point = samp_point</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZCANTool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Main class for ZLG CAN/CANFD device operations.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize the ZCANTool class.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.zlgcan = zlgcan_module.ZCAN()</span><br><span class="line">        <span class="variable language_">self</span>.can_config_info = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.device_handle = zlgcan_module.INVALID_DEVICE_HANDLE</span><br><span class="line">        <span class="variable language_">self</span>.channel_handle = zlgcan_module.INVALID_CHANNEL_HANDLE</span><br><span class="line">        <span class="variable language_">self</span>.protocol = <span class="string">&quot;CAN&quot;</span>  <span class="comment"># CAN | CANFD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># region Configuration Methods</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hex_to_int</span>(<span class="params">self, hex_str, param_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Convert hexadecimal string to integer with validation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            hex_str (str): Hexadecimal string to convert.</span></span><br><span class="line"><span class="string">            param_name (str): Name of the parameter for error messages.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            int: Converted integer value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If the input string is not a valid hexadecimal.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(hex_str, <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Invalid <span class="subst">&#123;param_name&#125;</span>: <span class="subst">&#123;hex_str&#125;</span>&quot;</span>) <span class="keyword">from</span> e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convert_init_config</span>(<span class="params">self, config_dict</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Convert the configuration dictionary to the ctypes struct.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            config_dict (dict): Configuration dictionary containing initialization parameters.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            ZCAN_CHANNEL_INIT_CONFIG: Configured ctypes structure.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        init_config = ZCAN_CHANNEL_INIT_CONFIG()</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.protocol == <span class="string">&quot;CANFD&quot;</span>:</span><br><span class="line">            init_config.can_type = ZCAN_TYPE_CANFD.value  <span class="comment"># 确保传递的是整数值</span></span><br><span class="line">            init_config.config.canfd.acc_code = config_dict[<span class="string">&#x27;acc_code&#x27;</span>]</span><br><span class="line">            init_config.config.canfd.acc_mask = config_dict[<span class="string">&#x27;acc_mask&#x27;</span>]</span><br><span class="line">            init_config.config.canfd.abit_timing = config_dict[<span class="string">&#x27;timing&#x27;</span>][<span class="string">&#x27;arbitration&#x27;</span>][<span class="string">&#x27;timing0&#x27;</span>]</span><br><span class="line">            init_config.config.canfd.dbit_timing = config_dict[<span class="string">&#x27;timing&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;timing0&#x27;</span>]</span><br><span class="line">            init_config.config.canfd.brp = config_dict[<span class="string">&#x27;timing&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;timing1&#x27;</span>]</span><br><span class="line">            init_config.config.canfd.<span class="built_in">filter</span> = config_dict[<span class="string">&#x27;filter&#x27;</span>]</span><br><span class="line">            init_config.config.canfd.mode = config_dict[<span class="string">&#x27;mode&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            init_config.can_type = ZCAN_TYPE_CAN.value  <span class="comment"># 确保传递的是整数值</span></span><br><span class="line">            init_config.config.can.acc_code = config_dict[<span class="string">&#x27;acc_code&#x27;</span>]</span><br><span class="line">            init_config.config.can.acc_mask = config_dict[<span class="string">&#x27;acc_mask&#x27;</span>]</span><br><span class="line">            init_config.config.can.<span class="built_in">filter</span> = config_dict[<span class="string">&#x27;filter&#x27;</span>]</span><br><span class="line">            init_config.config.can.timing0 = config_dict[<span class="string">&#x27;timing&#x27;</span>][<span class="string">&#x27;arbitration&#x27;</span>][<span class="string">&#x27;timing0&#x27;</span>]</span><br><span class="line">            init_config.config.can.timing1 = config_dict[<span class="string">&#x27;timing&#x27;</span>][<span class="string">&#x27;arbitration&#x27;</span>][<span class="string">&#x27;timing1&#x27;</span>]</span><br><span class="line">            init_config.config.can.mode = config_dict[<span class="string">&#x27;mode&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> init_config</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_can_config</span>(<span class="params">self, config_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Load and validate device configuration.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            config_path (str): Path to the configuration JSON file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict: Loaded configuration dictionary.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If required fields are missing or invalid.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(config_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            config = json.load(f)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Device type handling</span></span><br><span class="line">        dev_info = config[<span class="string">&#x27;device_info&#x27;</span>]</span><br><span class="line">        dev_type_str = dev_info.get(<span class="string">&#x27;device_type&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dev_type_str:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Missing device_type in device_info&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Protocol detection</span></span><br><span class="line">        <span class="variable language_">self</span>.protocol = <span class="string">&quot;CANFD&quot;</span> <span class="keyword">if</span> <span class="string">&quot;FD&quot;</span> <span class="keyword">in</span> dev_type_str <span class="keyword">else</span> <span class="string">&quot;CAN&quot;</span></span><br><span class="line">        config[<span class="string">&#x27;protocol&#x27;</span>] = <span class="variable language_">self</span>.protocol  <span class="comment"># Add protocol field</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dev_info[<span class="string">&#x27;device_type&#x27;</span>] = <span class="built_in">getattr</span>(zlgcan_module, dev_type_str)</span><br><span class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Invalid device type: <span class="subst">&#123;dev_type_str&#125;</span>&quot;</span>) <span class="keyword">from</span> e</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Channel config processing</span></span><br><span class="line">        channel_config = config[<span class="string">&#x27;channel_config&#x27;</span>]</span><br><span class="line">        required_params = [<span class="string">&#x27;can_index&#x27;</span>, <span class="string">&#x27;init_config&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> required_params:</span><br><span class="line">            <span class="keyword">if</span> param <span class="keyword">not</span> <span class="keyword">in</span> channel_config:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Missing <span class="subst">&#123;param&#125;</span> in channel_config&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert hex values</span></span><br><span class="line">        init_config = channel_config[<span class="string">&#x27;init_config&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">&#x27;acc_code&#x27;</span>, <span class="string">&#x27;acc_mask&#x27;</span>]:</span><br><span class="line">            init_config[key] = <span class="variable language_">self</span>.hex_to_int(init_config[key], key)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.can_config_info = config</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    <span class="comment"># endregion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># region Device Control</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_dev_open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize CAN device.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If configuration is not loaded or device initialization fails.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.can_config_info:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Configuration not loaded&quot;</span>)</span><br><span class="line"></span><br><span class="line">        dev_info = <span class="variable language_">self</span>.can_config_info[<span class="string">&#x27;device_info&#x27;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.device_handle = <span class="variable language_">self</span>.zlgcan.OpenDevice(</span><br><span class="line">            dev_info[<span class="string">&#x27;device_type&#x27;</span>],</span><br><span class="line">            dev_info[<span class="string">&#x27;device_index&#x27;</span>],</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.device_handle == zlgcan_module.INVALID_DEVICE_HANDLE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Device initialization failed&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Device opened [handle:<span class="subst">&#123;self.device_handle&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.device_handle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_channel_init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize CAN channel.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If CAN configuration is not loaded or channel initialization fails.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.can_config_info <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;CAN configuration not loaded&quot;</span>)</span><br><span class="line"></span><br><span class="line">        channel_config = <span class="variable language_">self</span>.can_config_info[<span class="string">&#x27;channel_config&#x27;</span>]</span><br><span class="line">        init_dict = channel_config[<span class="string">&#x27;init_config&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert to ctypes structure</span></span><br><span class="line">        init_config = <span class="variable language_">self</span>.convert_init_config(init_dict)</span><br><span class="line"></span><br><span class="line">        channel_handle = <span class="variable language_">self</span>.zlgcan.InitCAN(</span><br><span class="line">            <span class="variable language_">self</span>.device_handle,</span><br><span class="line">            channel_config[<span class="string">&#x27;can_index&#x27;</span>],</span><br><span class="line">            init_config  <span class="comment"># Pass structure pointer</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> channel_handle == zlgcan_module.INVALID_CHANNEL_HANDLE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Channel initialization failed&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Initialized CAN channel [handle:<span class="subst">&#123;channel_handle&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.channel_handle = channel_handle</span><br><span class="line">        <span class="keyword">return</span> channel_handle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_channel_start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Activate communication channel.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If channel is not initialized or starting the channel fails.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.channel_handle == zlgcan_module.INVALID_CHANNEL_HANDLE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Channel not initialized&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># CANFD-specific initialization (if needed)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.protocol == <span class="string">&quot;CANFD&quot;</span>:</span><br><span class="line">            <span class="comment"># 使用结构体中的字段进行配置，而不是直接调用SetValue</span></span><br><span class="line">            <span class="keyword">pass</span>  <span class="comment"># 已在convert_init_config中完成配置</span></span><br><span class="line"></span><br><span class="line">        result = <span class="variable language_">self</span>.zlgcan.StartCAN(<span class="variable language_">self</span>.channel_handle)</span><br><span class="line">        <span class="keyword">if</span> result == zlgcan_module.INVALID_CHANNEL_HANDLE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Failed to start channel&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Channel started [handle:<span class="subst">&#123;self.channel_handle&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="comment"># endregion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># region Data Transmission</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_send_message</span>(<span class="params">self, can_id, data, frame_type=<span class="number">0</span>, brs=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Transmit CAN/CANFD message.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            can_id (int): Message identifier (11/29-bit).</span></span><br><span class="line"><span class="string">            data (list[int]): Payload data (max 8B for CAN, 64B for CANFD).</span></span><br><span class="line"><span class="string">            frame_type (int): Frame type (0=Standard, 1=Extended).</span></span><br><span class="line"><span class="string">            brs (int): CANFD Bit Rate Switch (0=disable, 1=enable).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            int: Number of frames sent.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If channel is not initialized or data length exceeds limits.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.channel_handle == zlgcan_module.INVALID_CHANNEL_HANDLE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Channel not initialized&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Validate data length</span></span><br><span class="line">        max_len = <span class="number">64</span> <span class="keyword">if</span> <span class="variable language_">self</span>.protocol == <span class="string">&quot;CANFD&quot;</span> <span class="keyword">else</span> <span class="number">8</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; max_len:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Data length exceeds <span class="subst">&#123;max_len&#125;</span> bytes&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create message object</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.protocol == <span class="string">&quot;CANFD&quot;</span>:</span><br><span class="line">            tx_message = zlgcan_module.CANFD_MSG()  <span class="comment"># type: ignore[attr-defined]</span></span><br><span class="line">            tx_message.brs = brs</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tx_message = zlgcan_module.CAN_MSG()  <span class="comment"># type: ignore[attr-defined]</span></span><br><span class="line"></span><br><span class="line">        tx_message.<span class="built_in">id</span> = can_id</span><br><span class="line">        tx_message.frame_type = frame_type</span><br><span class="line">        tx_message.remote = <span class="literal">False</span></span><br><span class="line">        tx_message.extern = frame_type</span><br><span class="line">        tx_message.data = (zlgcan_module.c_ubyte * <span class="number">64</span>)(*data)  <span class="comment"># type: ignore[attr-defined]</span></span><br><span class="line">        tx_message.<span class="built_in">len</span> = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">        sent = <span class="variable language_">self</span>.zlgcan.Transmit(<span class="variable language_">self</span>.channel_handle, [tx_message], <span class="number">1</span>)  <span class="comment"># type: ignore[attr-defined]</span></span><br><span class="line">        <span class="keyword">if</span> sent != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Transmission failed (sent <span class="subst">&#123;sent&#125;</span> frames)&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> sent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_receive_message</span>(<span class="params">self, max_count=<span class="number">100</span>, timeout=<span class="number">100</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Receive messages from the bus.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            max_count (int): Maximum number of messages to receive.</span></span><br><span class="line"><span class="string">            timeout (int): Timeout in milliseconds.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            list[dict]: List of received messages.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.channel_handle == zlgcan_module.INVALID_CHANNEL_HANDLE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Channel not initialized&quot;</span>)</span><br><span class="line"></span><br><span class="line">        available = <span class="variable language_">self</span>.zlgcan.GetReceiveNum(<span class="variable language_">self</span>.channel_handle)</span><br><span class="line">        read_count = <span class="built_in">min</span>(available, max_count) <span class="keyword">if</span> available &gt;= <span class="number">0</span> <span class="keyword">else</span> max_count</span><br><span class="line"></span><br><span class="line">        raw_message = <span class="variable language_">self</span>.zlgcan.Receive(<span class="variable language_">self</span>.channel_handle, read_count, timeout)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.can_parse_received_messages(raw_message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_parse_received_messages</span>(<span class="params">self, raw_message</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Convert raw messages to structured data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            raw_message (list): List of raw messages received from the bus.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            list[dict]: List of structured messages.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        parsed = []</span><br><span class="line">        <span class="keyword">for</span> parse_message <span class="keyword">in</span> raw_message:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(parse_message, <span class="string">&#x27;brs&#x27;</span>):  <span class="comment"># CANFD message</span></span><br><span class="line">                item = &#123;</span><br><span class="line">                    <span class="string">&#x27;protocol&#x27;</span>: <span class="string">&#x27;CANFD&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;id&#x27;</span>: parse_message.<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&#x27;data&#x27;</span>: <span class="built_in">bytes</span>(parse_message.data[:parse_message.<span class="built_in">len</span>]),</span><br><span class="line">                    <span class="string">&#x27;timestamp&#x27;</span>: parse_message.timestamp,</span><br><span class="line">                    <span class="string">&#x27;frame_type&#x27;</span>: parse_message.frame_type,</span><br><span class="line">                    <span class="string">&#x27;brs&#x27;</span>: parse_message.brs</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># Standard CAN message</span></span><br><span class="line">                item = &#123;</span><br><span class="line">                    <span class="string">&#x27;protocol&#x27;</span>: <span class="string">&#x27;CAN&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;id&#x27;</span>: parse_message.<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&#x27;data&#x27;</span>: <span class="built_in">bytes</span>(parse_message.data[:parse_message.<span class="built_in">len</span>]),</span><br><span class="line">                    <span class="string">&#x27;timestamp&#x27;</span>: parse_message.timestamp,</span><br><span class="line">                    <span class="string">&#x27;frame_type&#x27;</span>: parse_message.frame_type</span><br><span class="line">                &#125;</span><br><span class="line">            parsed.append(item)</span><br><span class="line">        <span class="keyword">return</span> parsed</span><br><span class="line">    <span class="comment"># endregion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># region Utility Methods</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_dev_close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Close device connection.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.device_handle != zlgcan_module.INVALID_DEVICE_HANDLE:</span><br><span class="line">            <span class="variable language_">self</span>.zlgcan.CloseDevice(<span class="variable language_">self</span>.device_handle)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Device closed [handle:<span class="subst">&#123;self.device_handle&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.device_handle = zlgcan_module.INVALID_DEVICE_HANDLE</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_clear_buffer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Clear channel buffer.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.channel_handle != zlgcan_module.INVALID_CHANNEL_HANDLE:</span><br><span class="line">            <span class="variable language_">self</span>.zlgcan.ClearBuffer(<span class="variable language_">self</span>.channel_handle)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Channel buffer cleared&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Context manager entry.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            ZCANTool: The ZCANTool instance.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Context manager exit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Ensures the device is closed when exiting the context.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.can_dev_close()</span><br><span class="line">    <span class="comment"># endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Usage example</span></span><br><span class="line">    <span class="keyword">with</span> ZCANTool() <span class="keyword">as</span> tool:</span><br><span class="line">        tool.load_can_config(<span class="string">&#x27;can_config.json&#x27;</span>)</span><br><span class="line">        tool.can_dev_open()</span><br><span class="line">        tool.can_channel_init()</span><br><span class="line">        tool.can_channel_start()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send demo message</span></span><br><span class="line">        tool.can_send_message(</span><br><span class="line">            can_id=<span class="number">0x123</span>,</span><br><span class="line">            data=[<span class="number">0x01</span>, <span class="number">0x23</span>, <span class="number">0x45</span>, <span class="number">0x67</span>],</span><br><span class="line">            brs=<span class="number">1</span> <span class="keyword">if</span> tool.protocol == <span class="string">&quot;CANFD&quot;</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Receive loop</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            msgs = tool.can_receive_message()</span><br><span class="line">            <span class="keyword">for</span> msg <span class="keyword">in</span> msgs:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;msg[<span class="string">&#x27;protocol&#x27;</span>]&#125;</span>] ID:0x<span class="subst">&#123;msg[<span class="string">&#x27;id&#x27;</span>]:X&#125;</span> Data:<span class="subst">&#123;msg[<span class="string">&#x27;data&#x27;</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基于周立功的Python上位机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 周立功 </tag>
            
            <tag> CAN上位机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置github+hexo博客使之在其他网页上能被检索到</title>
      <link href="/2025/01/27/%E9%85%8D%E7%BD%AEgithub-hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E4%B9%8B%E5%9C%A8%E5%85%B6%E4%BB%96%E7%BD%91%E9%A1%B5%E4%B8%8A%E8%83%BD%E8%A2%AB%E6%A3%80%E7%B4%A2%E5%88%B0/"/>
      <url>/2025/01/27/%E9%85%8D%E7%BD%AEgithub-hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E4%B9%8B%E5%9C%A8%E5%85%B6%E4%BB%96%E7%BD%91%E9%A1%B5%E4%B8%8A%E8%83%BD%E8%A2%AB%E6%A3%80%E7%B4%A2%E5%88%B0/</url>
      
        <content type="html"><![CDATA[<p>要让你的 GitHub + Hexo 博客能够在其他网页(比如 Google、Bing 等搜索引擎)上被搜索到, 你需要对博客进行 SEO(搜索引擎优化)设置. 以下是一些关键步骤: </p><hr><h3 id="1-确保博客可以被搜索引擎抓取"><a href="#1-确保博客可以被搜索引擎抓取" class="headerlink" title="1. 确保博客可以被搜索引擎抓取"></a><strong>1. 确保博客可以被搜索引擎抓取</strong></h3><ul><li><p><strong>检查是否允许爬虫访问</strong>: 确认你的博客没有阻止搜索引擎爬取内容. </p><ul><li>在 Hexo 项目的根目录下, 查看或创建 <code>robots.txt</code> 文件, 内容如下: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow:</span><br><span class="line">Sitemap: https://yourusername.github.io/sitemap.xml</span><br></pre></td></tr></table></figure><ul><li><code>Disallow:</code> 表示允许所有搜索引擎抓取. </li><li>替换 <code>https://yourusername.github.io</code> 为你的博客地址.</li></ul></li></ul></li><li><p><strong>开启 GitHub Pages 的索引功能</strong>:<br>默认情况下, GitHub Pages 允许搜索引擎抓取. 如果你曾更改设置, 请确保在 GitHub 仓库的”Settings”中没有启用 “Restrict pages to private” 选项.</p></li></ul><hr><h3 id="2-配置-Sitemap-和-Meta-信息"><a href="#2-配置-Sitemap-和-Meta-信息" class="headerlink" title="2. 配置 Sitemap 和 Meta 信息"></a><strong>2. 配置 Sitemap 和 Meta 信息</strong></h3><p>Sitemap 和 Meta 标签对于搜索引擎优化非常重要. </p><h4 id="2-1-生成-Sitemap"><a href="#2-1-生成-Sitemap" class="headerlink" title="2.1 生成 Sitemap"></a>2.1 <strong>生成 Sitemap</strong></h4><p>Sitemap 是搜索引擎了解你网站结构的重要文件. </p><ol><li>安装 <code>hexo-generator-sitemap</code> 插件: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li>在 Hexo 的 <code>_config.yml</code> 中添加 Sitemap 配置: <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure></li><li>重新生成并部署博客: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>之后, 博客的根目录会生成 <code>sitemap.xml</code> 文件.</li></ol><h4 id="2-2-生成-RSS-Feed"><a href="#2-2-生成-RSS-Feed" class="headerlink" title="2.2 生成 RSS Feed"></a>2.2 <strong>生成 RSS Feed</strong></h4><p>RSS Feed 可以帮助搜索引擎更好地抓取博客内容. </p><ol><li>安装 <code>hexo-generator-feed</code> 插件: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li>在 <code>_config.yml</code> 中配置: <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>部署后, 你的博客会生成 <code>atom.xml</code> 文件.</li></ol><h4 id="2-3-优化-Meta-标签"><a href="#2-3-优化-Meta-标签" class="headerlink" title="2.3 优化 Meta 标签"></a>2.3 <strong>优化 Meta 标签</strong></h4><ol><li>确保你的主题支持 SEO. 如果主题没有内置 SEO, 可以手动添加到 <code>themes/&lt;your-theme&gt;/layout/_partial/head.ejs</code> 中: <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;你的博客描述&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词1, 关键词2, Hexo博客, 技术博客&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;你的名字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改 <code>_config.yml</code> 中的站点信息: <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">你的博客标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">你的博客简介</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">博客,</span> <span class="string">技术,</span> <span class="string">Hexo</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="3-提交站点给搜索引擎"><a href="#3-提交站点给搜索引擎" class="headerlink" title="3. 提交站点给搜索引擎"></a><strong>3. 提交站点给搜索引擎</strong></h3><h4 id="3-1-提交给-Google"><a href="#3-1-提交给-Google" class="headerlink" title="3.1 提交给 Google"></a>3.1 <strong>提交给 Google</strong></h4><ol><li>进入 <a href="https://search.google.com/search-console/">Google Search Console</a>. </li><li>添加你的博客网址为新站点. </li><li>提交 <code>sitemap.xml</code> 文件路径: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourusername.github.io/sitemap.xml</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-提交给-Bing"><a href="#3-2-提交给-Bing" class="headerlink" title="3.2 提交给 Bing"></a>3.2 <strong>提交给 Bing</strong></h4><ol><li>访问 <a href="https://www.bing.com/webmasters">Bing Webmaster</a>. </li><li>添加站点并验证. </li><li>提交 <code>sitemap.xml</code> 文件.</li></ol><h4 id="3-3-其他搜索引擎"><a href="#3-3-其他搜索引擎" class="headerlink" title="3.3 其他搜索引擎"></a>3.3 <strong>其他搜索引擎</strong></h4><p>对于其他搜索引擎(如百度、Yandex), 也可以通过类似的方法提交 Sitemap. </p><hr><h3 id="4-优化内容和结构"><a href="#4-优化内容和结构" class="headerlink" title="4. 优化内容和结构"></a><strong>4. 优化内容和结构</strong></h3><h4 id="4-1-设置友好的-URL"><a href="#4-1-设置友好的-URL" class="headerlink" title="4.1 设置友好的 URL"></a>4.1 <strong>设置友好的 URL</strong></h4><ul><li>确保博客的 URL 简单且包含关键词. 比如, 将文章路径从默认的日期格式更改为更清晰的结构: <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:title/</span></span><br></pre></td></tr></table></figure></li><li>修改 <code>_config.yml</code> 中的 <code>permalink</code> 设置.</li></ul><h4 id="4-2-发布高质量内容"><a href="#4-2-发布高质量内容" class="headerlink" title="4.2 发布高质量内容"></a>4.2 <strong>发布高质量内容</strong></h4><ul><li>定期发布原创内容, 这能提高你的博客在搜索引擎中的排名. </li><li>在每篇文章中使用合适的标题(<code>&lt;h1&gt;</code> 和 <code>&lt;h2&gt;</code>), 并包含关键字.</li></ul><h4 id="4-3-内链与外链"><a href="#4-3-内链与外链" class="headerlink" title="4.3 内链与外链"></a>4.3 <strong>内链与外链</strong></h4><ul><li>在你的博客文章中链接到其他相关的内容. </li><li>鼓励其他博客或平台链接到你的博客.</li></ul><hr><h3 id="5-使用分析工具跟踪效果"><a href="#5-使用分析工具跟踪效果" class="headerlink" title="5. 使用分析工具跟踪效果"></a><strong>5. 使用分析工具跟踪效果</strong></h3><ul><li>安装 Google Analytics: <ol><li>注册 Google Analytics, 获取跟踪代码. </li><li>将代码添加到主题的 <code>head.ejs</code> 文件中. <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://www.googletagmanager.com/gtag/js?id=YOUR_TRACKING_ID&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">dataLayer</span> = <span class="variable language_">window</span>.<span class="property">dataLayer</span> || [];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">gtag</span>(<span class="params"></span>)&#123;dataLayer.<span class="title function_">push</span>(<span class="variable language_">arguments</span>);&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">gtag</span>(<span class="string">&#x27;js&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">gtag</span>(<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;YOUR_TRACKING_ID&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><hr><h3 id="6-等待搜索引擎更新"><a href="#6-等待搜索引擎更新" class="headerlink" title="6. 等待搜索引擎更新"></a><strong>6. 等待搜索引擎更新</strong></h3><p>搜索引擎需要一定时间抓取和索引你的博客内容, 通常会在几天到几周内完成. 你可以通过搜索博客标题或特定关键词来检查是否已被索引. </p><p><strong>总结</strong>: 通过配置 <code>robots.txt</code>、生成 <code>sitemap.xml</code>、优化内容和提交搜索引擎, 你的 GitHub + Hexo 博客很快就能被更多网页和搜索引擎检索到! </p>]]></content>
      
      
      <categories>
          
          <category> 基于github+hexo的博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2025/01/26/%E9%9A%8F%E7%AC%94/"/>
      <url>/2025/01/26/%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2025-02-23</span></span><br><span class="line">爱是大度, </span><br><span class="line">爱是无私, </span><br><span class="line">爱是自由意志的沉沦.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2025-02-15</span></span><br><span class="line">思绪翻涌时, 偏逢重云蔽天, 明月与你皆不可见;</span><br><span class="line">心海澄明处, 自有星河引路, 长风携光共赴新程.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2025-01-26</span></span><br><span class="line">社会上的大部分人都是俗人, 不沾点酒色财气, 难以与之建立连接, 更无所谓入世、和光同尘. </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-12-31</span></span><br><span class="line">法律, 并非神圣、公平与正义的化身, 而是多个阶级不断抗争与妥协的产物, 是维护当前秩序的工具, 是约束所有人行为的规则锁链, 学法知法用法是个人将法律化为维护权益的利剑、划定行为的厚盾乃至推动法律不断发展的前提.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-12-25</span></span><br><span class="line">1.心不苦则智慧不开, 心不死则道不生. </span><br><span class="line"></span><br><span class="line">2.静能生定, 定能生慧, 慧至从容, 纵风雨来兮, 又有何惧?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-12-01</span></span><br><span class="line">劳动只是创造价值而无法致富, 致富是个分配问题. </span><br><span class="line"></span><br><span class="line">岗位职务的<span class="string">&quot;闪亮光芒&quot;</span>源于该岗位上的少数的高洁可贵的具象人, 世人总是难以分辨何为发光以及何是沾光. </span><br><span class="line"></span><br><span class="line">富在术数, 不在劳身. </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-11-16</span></span><br><span class="line">拥有了他人的信任和依赖, 亦是获得了一种特权, 但那是消耗性的、易受损的, 不应轻易使用.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-03-07</span></span><br><span class="line">对未知保持好奇与敬畏之心</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-02-05</span></span><br><span class="line">严于律己, 宽以待人.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-02-05</span></span><br><span class="line">大多数人都是被世俗的环境裹挟着前进, 不过若是快乐的话, 又有什么不好的呢?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-01-30</span></span><br><span class="line">万物不为我所有, 万物皆为我所用.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-01-21</span></span><br><span class="line">1.红尘沾身难褪净, 心扰何以逍遥游.</span><br><span class="line"></span><br><span class="line">2.命运的交易总是遵循等价法则.</span><br><span class="line"></span><br><span class="line">3.物类之起, 必有所始; 荣辱之来, 必象其德.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2024-01-07</span></span><br><span class="line">1.缺乏智慧之人, 纵使成为事件的亲历者, 也难以把握事件的全貌或真相.</span><br><span class="line"></span><br><span class="line">2.某方面我对他人保持耐心和宽容, 正如另一方面他人对我持有耐心和宽容.</span><br><span class="line"></span><br><span class="line">3.警惕于他人的称赞, 留意于他人的批评, 从中提取出可用的信息.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2023-09-27</span></span><br><span class="line">欸, 执迷不悟, 自讨苦吃.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2023-01-22</span></span><br><span class="line">1.默默积蓄力量, 做好必要准备, 等待时来运转那一刻.</span><br><span class="line"></span><br><span class="line">2.时来天地皆同力, 运去英雄不自由.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2022.11.16</span></span><br><span class="line">潜龙勿用.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2022.09.11</span></span><br><span class="line">时局动荡, 大变将至, 时不我待, 只争朝夕.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2022.02.18</span></span><br><span class="line">无美也无丑, 无善也无恶, 无对也无错, 对立的本自一体, 世人分化之.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020.01.23</span></span><br><span class="line">颜开泪落把话谈, 一切尽在相逢时.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2019.10.17</span></span><br><span class="line">人生实苦, 但请足够相信;</span><br><span class="line">道路漫长, 还望时刻坚持.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2019.10.15</span></span><br><span class="line">雨落, 秋至, 百花杀, 万里荒芜.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2019.10.14</span></span><br><span class="line">热闹的人易散场, 慢热的人最长情.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2019.08.12</span></span><br><span class="line">大雨倾盆, 与一老叟共同赏雨, 无言, 然皆思绪万千.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 所思所想 </tag>
            
            <tag> 现所认同 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github+hexo博客中启用搜索功能</title>
      <link href="/2025/01/26/github-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%90%AF%E7%94%A8%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2025/01/26/github-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%90%AF%E7%94%A8%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>要在 GitHub + Hexo 博客中启用搜索功能, 你可以使用一些现成的工具来实现. 常见的方法是使用 <strong>Hexo Search</strong> 插件, 或者借助 <strong>Algolia</strong> 来实现更强大的搜索功能. 下面是两种常见的实现方式: </p><h3 id="方法-1-使用-Hexo-Search-插件"><a href="#方法-1-使用-Hexo-Search-插件" class="headerlink" title="方法 1: 使用 Hexo Search 插件"></a>方法 1: 使用 Hexo Search 插件</h3><ol><li><p><strong>安装插件:</strong><br>进入你的 Hexo 项目文件夹, 打开终端(命令行), 运行以下命令安装 Hexo 的搜索插件: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 Hexo:</strong><br>安装完插件后, 需要在 Hexo 的配置文件 <code>_config.yml</code> 中添加相关设置. 打开 <code>_config.yml</code>, 找到 <code>search</code> 配置部分, 或者直接在文件末尾添加以下内容: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>生成搜索索引:</strong><br>运行以下命令来生成博客的搜索索引: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p><strong>部署博客:</strong><br>你可以通过以下命令将修改后的博客部署到 GitHub: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法-2-使用-Algolia-搜索-推荐更强大的搜索体验"><a href="#方法-2-使用-Algolia-搜索-推荐更强大的搜索体验" class="headerlink" title="方法 2: 使用 Algolia 搜索(推荐更强大的搜索体验)"></a>方法 2: 使用 Algolia 搜索(推荐更强大的搜索体验)</h3><ol><li><p><strong>创建 Algolia 账户:</strong><br>访问 <a href="https://www.algolia.com/">Algolia 官网</a> 并注册一个帐户. </p></li><li><p><strong>创建一个新应用:</strong><br>在 Algolia 控制台中创建一个新的应用, 并记下你的 <code>ApplicationID</code> 和 <code>Search-Only API Key</code>. </p></li><li><p><strong>安装插件:</strong><br>使用以下命令安装 Hexo Algolia 插件: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-algolia --save</span><br></pre></td></tr></table></figure></li><li><p><strong>配置插件:</strong><br>打开 Hexo 的配置文件 <code>_config.yml</code>, 并添加以下配置: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">applicationID:</span> <span class="string">your-application-id</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">your-api-key</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure><p>你需要将 <code>your-application-id</code> 和 <code>your-api-key</code> 替换为你在 Algolia 中创建应用后获得的真实值. </p></li><li><p><strong>生成搜索索引:</strong><br>在命令行中运行以下命令以生成搜索索引: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure></li><li><p><strong>将搜索功能添加到主题:</strong><br>需要在主题的 <code>layout</code> 文件中添加搜索框, 并使用 Algolia 的 JavaScript 来实现搜索. 你可以参考 <a href="https://github.com/hexojs/hexo-algolia">Hexo Algolia 插件文档</a> 获取更详细的说明. </p></li><li><p><strong>部署博客:</strong><br>完成配置后, 使用 <code>hexo deploy</code> 部署博客到 GitHub.</p></li></ol><p>这两种方法都能提供搜索功能, 不过使用 <strong>Algolia</strong> 插件会带来更流畅和更快速的搜索体验, 特别是对于大型博客. 希望这些方法对你有帮助! </p>]]></content>
      
      
      <categories>
          
          <category> 基于github+hexo的博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows系统上启用WSL子系统</title>
      <link href="/2025/01/26/%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%90%AF%E7%94%A8WSL%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/01/26/%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%90%AF%E7%94%A8WSL%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>在 Windows 上使用 Linux 子系统(WSL)可以让你在不离开 Windows 的环境下运行 Linux 命令行工具和应用程序. 对于不熟悉 Linux 系统的 Windows 用户来说, 开启 WSL 看似是一项复杂的任务, 但实际上通过以下步骤, 你可以轻松地在Windows 上启用 WSL. </p><h3 id="1-确保-Windows-版本支持-WSL"><a href="#1-确保-Windows-版本支持-WSL" class="headerlink" title="1. 确保 Windows 版本支持 WSL"></a>1. 确保 Windows 版本支持 WSL</h3><p>首先, 你需要确保你的 Windows 操作系统版本支持 WSL. Windows 10 或更高版本的 Windows 10(版本 1903 及更高版本)支持 WSL2. </p><p>你可以通过以下步骤检查你的 Windows 版本: </p><ol><li>按下 <code>Windows + R</code> 打开运行窗口, 输入 <code>winver</code> 并按下回车键. </li><li>弹出的窗口会显示你当前的 Windows 版本号. 确保你的 Windows 版本是 1903 或更高版本.</li></ol><h3 id="2-开启-WSL-功能"><a href="#2-开启-WSL-功能" class="headerlink" title="2. 开启 WSL 功能"></a>2. 开启 WSL 功能</h3><p>Windows 10 和 Windows 11 提供了便捷的方式来启用 WSL. 以下是详细步骤: </p><h4 id="2-1-启用-WSL-和虚拟机平台"><a href="#2-1-启用-WSL-和虚拟机平台" class="headerlink" title="2.1 启用 WSL 和虚拟机平台"></a>2.1 启用 WSL 和虚拟机平台</h4><ol><li><p><strong>打开 PowerShell 作为管理员</strong>: </p><ul><li>在开始菜单中搜索 “PowerShell”, 右键点击 “Windows PowerShell”, 选择 “以管理员身份运行”.</li></ul></li><li><p><strong>输入以下命令启用 WSL 和虚拟机平台功能</strong>: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li><li><p><strong>启用 Hyper-V 功能</strong>(如果需要使用 WSL2): </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Hyper-V-All</span> /all /norestart</span><br></pre></td></tr></table></figure><p>执行完这些命令后, 重启电脑使更改生效.</p></li></ol><h4 id="2-2-启用-WSL2"><a href="#2-2-启用-WSL2" class="headerlink" title="2.2 启用 WSL2"></a>2.2 启用 WSL2</h4><p>WSL2 提供了完整的 Linux 内核, 并且性能比 WSL1 更好. 默认情况下, Windows 会安装 WSL1, 但你可以轻松将其更新为 WSL2. </p><ol><li><p><strong>下载 WSL2 Linux 内核更新包</strong>:<br>前往 <a href="https://aka.ms/wsl2kernel">Microsoft 官方网站</a> 下载并安装 WSL2 的 Linux 内核更新包. </p></li><li><p><strong>将 WSL 版本设置为 2</strong>:<br>在 PowerShell 中输入以下命令: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这会将 WSL 的默认版本设置为 2. 如果你之前安装了 WSL1, 你可以将现有的 Linux 发行版升级到 WSL2: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-version</span> &lt;发行版名称&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p>例如, 若你的发行版是 Ubuntu, 命令应该是: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-version</span> Ubuntu <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-安装-Linux-发行版"><a href="#3-安装-Linux-发行版" class="headerlink" title="3. 安装 Linux 发行版"></a>3. 安装 Linux 发行版</h3><ol><li><p><strong>打开 Microsoft Store</strong>: </p><ul><li>在开始菜单中搜索 “Microsoft Store” 并打开它. </li><li>搜索 “Linux” 或你想要安装的具体 Linux 发行版, 如 “Ubuntu”, “Debian”等.</li></ul></li><li><p><strong>选择并安装你想要的发行版</strong>: </p><ul><li>点击所选的发行版(例如 Ubuntu), 然后点击 “获取” 安装它.</li></ul></li><li><p><strong>安装并配置 Linux 发行版</strong>: </p><ul><li>安装完成后, 点击 “启动” 启动 Linux 发行版. </li><li>第一次启动时, 系统会提示你设置用户名和密码. 设置完成后, 你就可以开始使用 Linux 环境了.</li></ul></li></ol><h3 id="4-配置-WSL-以便使用-Windows-和-Linux-环境"><a href="#4-配置-WSL-以便使用-Windows-和-Linux-环境" class="headerlink" title="4. 配置 WSL 以便使用 Windows 和 Linux 环境"></a>4. 配置 WSL 以便使用 Windows 和 Linux 环境</h3><h4 id="4-1-在-Linux-环境中访问-Windows-文件"><a href="#4-1-在-Linux-环境中访问-Windows-文件" class="headerlink" title="4.1 在 Linux 环境中访问 Windows 文件"></a>4.1 在 Linux 环境中访问 Windows 文件</h4><p>WSL 允许你在 Linux 环境中访问 Windows 文件. 你可以在 Linux 下通过以下路径访问 Windows 文件: </p><ul><li><code>/mnt/c/</code>: 访问 C 盘</li><li><code>/mnt/d/</code>: 访问 D 盘</li><li><code>/mnt/e/</code>: 访问 E 盘</li></ul><p>例如, 如果你想访问 <code>C:\Users</code> 文件夹, 可以在 WSL 中使用: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/c/Users</span><br></pre></td></tr></table></figure><h4 id="4-2-在-Windows-环境中访问-Linux-文件"><a href="#4-2-在-Windows-环境中访问-Linux-文件" class="headerlink" title="4.2 在 Windows 环境中访问 Linux 文件"></a>4.2 在 Windows 环境中访问 Linux 文件</h4><p>你也可以通过 Windows 中的文件管理器访问 WSL 中的 Linux 文件. 只需输入以下路径: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\wsl$\Ubuntu</span><br></pre></td></tr></table></figure><p>这会显示你在 Ubuntu 环境中的所有文件和文件夹. </p><h3 id="5-安装常用的-Linux-工具"><a href="#5-安装常用的-Linux-工具" class="headerlink" title="5. 安装常用的 Linux 工具"></a>5. 安装常用的 Linux 工具</h3><p>一旦你设置好了 WSL, 你可能希望安装一些常用的 Linux 工具, 比如 Git、Node.js 等. 在你的 Linux 环境中运行以下命令: </p><ol><li><p><strong>安装 Git</strong>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install git</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Node.js 和 npm</strong>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nodejs</span><br><span class="line"><span class="built_in">sudo</span> apt install npm</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-常见问题解决"><a href="#6-常见问题解决" class="headerlink" title="6. 常见问题解决"></a>6. 常见问题解决</h3><h4 id="6-1-WSL-无法启动怎么办"><a href="#6-1-WSL-无法启动怎么办" class="headerlink" title="6.1 WSL 无法启动怎么办?"></a>6.1 WSL 无法启动怎么办?</h4><ol><li><p>确保你的操作系统已安装最新的更新. </p></li><li><p>确保已启用 WSL 和虚拟机平台功能. </p></li><li><p>如果问题依旧, 尝试重置 WSL: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--unregister</span> &lt;发行版名称&gt;</span><br></pre></td></tr></table></figure><p>然后重新安装该发行版.</p></li></ol><h4 id="6-2-如何卸载-WSL"><a href="#6-2-如何卸载-WSL" class="headerlink" title="6.2 如何卸载 WSL ?"></a>6.2 如何卸载 WSL ?</h4><p>如果你不再需要 WSL, 可以按照以下步骤卸载: </p><ol><li><p>打开 PowerShell, 以管理员身份运行: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--unregister</span> &lt;发行版名称&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后可以卸载 WSL 所用的功能, 运行: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">disable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><p>通过上面的步骤, 你可以轻松地在 Windows 上启用 WSL 子系统, 安装和使用你喜欢的 Linux 发行版. WSL 使得 Windows 用户可以同时体验 Linux 环境的优势, 又不会影响到日常的 Windows 使用. 你可以在 WSL 中运行 Linux 命令、开发应用, 甚至使用 Linux 专用的工具, 同时保持与 Windows 的无缝集成. </p><hr><p>以上内容就是如何在 Windows 系统上开启 WSL 子系统功能的完整教程, 适用于初学者, 也提供了具体的步骤和解决方案. </p>]]></content>
      
      
      <categories>
          
          <category> Windows系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于github+hexo搭建个人博客</title>
      <link href="/2025/01/25/%E5%9F%BA%E4%BA%8Egithub-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/01/25/%E5%9F%BA%E4%BA%8Egithub-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="如何使用-GitHub-Hexo-搭建个人博客"><a href="#如何使用-GitHub-Hexo-搭建个人博客" class="headerlink" title="如何使用 GitHub + Hexo 搭建个人博客"></a>如何使用 GitHub + Hexo 搭建个人博客</h2><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架, 常用于构建静态博客.利用 <strong>GitHub Pages</strong> 和 <strong>Hexo</strong>, 你可以免费搭建一个高性能、易于管理的个人博客.本文将从头到尾带你搭建一个基于 GitHub 和 Hexo 的个人博客.</p><hr><h3 id="1-创建-GitHub-账号并设置-GitHub-Pages"><a href="#1-创建-GitHub-账号并设置-GitHub-Pages" class="headerlink" title="1. 创建 GitHub 账号并设置 GitHub Pages"></a>1. 创建 GitHub 账号并设置 GitHub Pages</h3><p>首先, 你需要有一个 <strong>GitHub</strong> 账号.如果还没有, 可以访问 <a href="https://github.com/">GitHub 官网</a> 注册一个账号.</p><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ol><li>登录到 GitHub 后, 点击右上角的 <strong>+</strong> 按钮, 选择 <strong>New repository</strong>(新建仓库).</li><li>给仓库取个名字, 建议使用 <code>用户名.github.io</code> 作为仓库名称, 例如: <code>miku01.github.io</code>.</li><li>选择公开(public), 并点击 <strong>Create repository</strong>.</li></ol><h4 id="启用-GitHub-Pages"><a href="#启用-GitHub-Pages" class="headerlink" title="启用 GitHub Pages"></a>启用 GitHub Pages</h4><ol><li>在你的仓库中, 点击 <strong>Settings</strong>(设置).</li><li>滚动到 <strong>GitHub Pages</strong> 部分.</li><li>在 <strong>Source</strong> 选项下, 选择 <code>main</code> 分支, 并保存.</li></ol><p>这样, 你的仓库就能托管静态文件并支持通过 <code>https://用户名.github.io</code> 访问你的博客页面.</p><hr><h3 id="2-安装必要的软件"><a href="#2-安装必要的软件" class="headerlink" title="2. 安装必要的软件"></a>2. 安装必要的软件</h3><p>在你的电脑上安装以下工具: </p><ul><li><strong>Node.js</strong>: Hexo 依赖于 Node.js 来生成静态文件.</li><li><strong>Git</strong>: 用于管理 Hexo 的源代码和与 GitHub 的同步.</li><li><strong>Hexo</strong>: 静态博客生成工具.</li></ul><h4 id="安装-Node-js-和-npm"><a href="#安装-Node-js-和-npm" class="headerlink" title="安装 Node.js 和 npm"></a>安装 Node.js 和 npm</h4><ol><li><p>访问 <a href="https://nodejs.org/">Node.js官网</a>, 下载并安装最新的 LTS 版本, 在Linux上也可使用以下指令进行安装.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加NodeSource PPA, 若需要其他版本(如 18.x 或 16.x), 请将 20.x 替换为相应的版本号</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | <span class="built_in">sudo</span> -E bash -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用NodeSource提供的PPA(个人包档案)安装最新的 LTS 或稳定版 Node.js</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装npm</span></span><br><span class="line"><span class="built_in">sudo</span> apt install npm</span><br></pre></td></tr></table></figure></li><li><p>安装完成后, 使用以下命令检查是否安装成功: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><ol><li>访问 <a href="https://git-scm.com/">Git官网</a>, 下载并安装 Git.</li><li>安装完成后, 执行以下命令确认 Git 安装: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>在终端(命令行)中执行以下命令安装 Hexo:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>这会将 Hexo 的命令行工具安装到全局.</p><hr><h3 id="3-初始化-Hexo-博客"><a href="#3-初始化-Hexo-博客" class="headerlink" title="3. 初始化 Hexo 博客"></a>3. 初始化 Hexo 博客</h3><ol><li><p>创建一个新的文件夹并进入该文件夹: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br></pre></td></tr></table></figure></li><li><p>使用 Hexo 初始化一个新的博客项目: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这会在当前文件夹中生成 Hexo 的博客文件.</p></li><li><p>安装 Hexo 依赖: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动 Hexo 本地服务器, 检查博客是否能正常运行: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>默认情况下, Hexo 会启动一个本地服务器, 访问 <code>http://localhost:4000</code> 可以查看你的博客.</p></li></ol><hr><h3 id="4-配置博客"><a href="#4-配置博客" class="headerlink" title="4. 配置博客"></a>4. 配置博客</h3><p>打开 Hexo 项目中的 <code>_config.yml</code> 文件, 这个文件是博客的主配置文件.你可以根据自己的需求修改以下内容: </p><ul><li><strong>title</strong>: 博客的标题.</li><li><strong>subtitle</strong>: 博客的副标题.</li><li><strong>description</strong>: 博客的描述.</li><li><strong>author</strong>: 博客的作者名称.</li><li><strong>url</strong>: 博客的网址, 设置为 <code>https://用户名.github.io</code>.</li></ul><p>示例配置: </p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Miku&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">A</span> <span class="string">blog</span> <span class="string">about</span> <span class="string">tech</span> <span class="string">and</span> <span class="string">programming</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">personal</span> <span class="string">tech</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Miku01</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://miku01.github.io</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-创建博客内容"><a href="#5-创建博客内容" class="headerlink" title="5. 创建博客内容"></a>5. 创建博客内容</h3><ol><li><p><strong>创建文章</strong>: 你可以使用 Hexo 的命令生成新的文章.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My first blog post&quot;</span></span><br></pre></td></tr></table></figure><p>这将在 <code>source/_posts/</code> 目录下创建一个新的文章 <code>my-first-blog-post.md</code>.你可以使用文本编辑器打开并编辑它.</p></li><li><p><strong>编写文章内容</strong>: 每篇文章都是一个 Markdown 文件, 可以使用 Markdown 语法编写内容.示例文章: </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My first blog post</span><br><span class="line">date: 2024-01-01 12:00:00</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> tech</span><br><span class="line"><span class="bullet">  -</span> programming</span><br><span class="line">categories:</span><br><span class="line"><span class="section">  - tech</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Welcome to my first blog post! This is where I share my experiences with coding and technology.</span><br></pre></td></tr></table></figure></li><li><p><strong>生成静态文件</strong>: 编辑完成后, 执行以下命令来生成静态网页: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>这将根据你的内容生成 <code>public/</code> 文件夹下的静态网页.</p></li><li><p><strong>启动本地服务</strong>: 你可以在本地查看博客效果: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <code>http://localhost:4000</code>, 查看你刚刚创建的博客.</p></li></ol><hr><h3 id="6-部署到-GitHub-Pages"><a href="#6-部署到-GitHub-Pages" class="headerlink" title="6. 部署到 GitHub Pages"></a>6. 部署到 GitHub Pages</h3><h4 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h4><ol><li><p>初始化本地 Git 仓库并进行配置: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>将所有文件提交到 Git 仓库: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>将远程仓库添加为 GitHub Pages 的目标仓库: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/你的用户名/你的仓库名.git</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置-Hexo-部署"><a href="#配置-Hexo-部署" class="headerlink" title="配置 Hexo 部署"></a>配置 Hexo 部署</h4><ol><li><p>打开 <code>_config.yml</code> 配置文件, 找到 <code>deploy</code> 部分, 并配置部署到 GitHub: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一: 使用HTTPS进行部署</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/你的用户名/你的仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 方式二: 使用SSH进行部署</span></span><br><span class="line"> <span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:你的用户名/你的仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>安装 Hexo 的 Git 部署插件: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>部署博客到 GitHub Pages: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一: 使用HTTPS进行部署</span></span><br><span class="line"><span class="comment"># 清理本地的博客文件</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将生成的静态文件推送到GitHub Pages</span></span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二: 使用SSH进行部署</span></span><br><span class="line"><span class="comment"># 生成SSH密钥对</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置保存密钥的文件路径, 直接回车是将密钥保存在默认路径</span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/current_user_name/.ssh/id_rsa):  [the file path to save the key]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入密钥的密码, 直接回车表示不设置密码</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [your passphrase]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认密钥的密码, 直接回车表示不设置密码</span></span><br><span class="line">Enter same passphrase again: [your passphrase]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在dashboard中查看密钥保存路径下的公钥内容, 此处使用的是默认路径</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制上面输出的公钥内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开GitHub -&gt; 打开博客所在仓库 -&gt; 打开&quot;Settings&quot; -&gt; 打开&quot;Deploy keys&quot; -&gt; 点击&quot;Add deply key&quot;按钮 -&gt; 输入密钥的标题 -&gt; 并粘贴公钥内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理本地的博客文件</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将生成的静态文件推送到GitHub Pages</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这会将博客内容部署到你设置的 GitHub 仓库, 并且能够通过 <code>https://你的用户名.github.io</code> 来访问.</p></li></ol><hr><h3 id="7-自定义主题和插件"><a href="#7-自定义主题和插件" class="headerlink" title="7. 自定义主题和插件"></a>7. 自定义主题和插件</h3><p>Hexo 提供了丰富的主题和插件供用户选择和使用.你可以通过以下方式为你的博客添加主题: </p><ol><li><p><strong>安装 Hexo 主题</strong>: 例如, 安装流行的 <a href="https://github.com/theme-next/hexo-theme-next">Next主题</a>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p><strong>修改 <code>_config.yml</code> 文件</strong>: 选择使用你安装的主题: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置主题</strong>: 每个主题都有自己的配置文件, 通常在 <code>themes/next/_config.yml</code> 中, 你可以根据需要调整主题的样式、布局和功能.</p></li></ol><hr><h3 id="8-完成并维护博客"><a href="#8-完成并维护博客" class="headerlink" title="8. 完成并维护博客"></a>8. 完成并维护博客</h3><ol><li><p><strong>发布新文章</strong>: 每次你创建新的文章或修改现有文章, 使用以下命令生成新的静态文件并重新部署: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li><li><p><strong>设置加密文章</strong>: 当想保护某些文章时, 你可以设置加密文章:<br>  安装 hexo-blog-encrypt 插件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><p>  在 Hexo 根目录的 _config.yml 文件中添加以下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo 主配置文件 (_config.yml)</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>         <span class="comment"># 启用加密功能</span></span><br><span class="line">  <span class="attr">default_password:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 全局默认密码(留空则每篇文章单独设置)</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&quot;private&quot;</span>, <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span> &#125;  <span class="comment"># 标签关联密码(如标记为 private 的文章使用密码 123456)</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">&quot;这是一篇加密文章, 请输入密码查看&quot;</span>  <span class="comment"># 加密提示文字</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;密码输入框占位提示(如: 请输入密码)&quot;</span> </span><br><span class="line">  <span class="attr">wrong_pass:</span> <span class="string">&quot;密码错误! &quot;</span></span><br><span class="line">  <span class="attr">wrong_hash:</span> <span class="string">&quot;文章校验失败, 可能已被篡改&quot;</span></span><br></pre></td></tr></table></figure><p>  在需要加密的文章的 front-matter 头部中, 通过以下方式标记加密:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 方式一: 直接指定密码</span></span><br><span class="line">---</span><br><span class="line">title: 我的私密文章</span><br><span class="line">date: 1970-01-01</span><br><span class="line"><span class="section">password: mysecret  # 单独设置该文章的密码(优先级最高)</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 方式二: 通过标签指定密码</span></span><br><span class="line">---</span><br><span class="line">title: 我的私密文章</span><br><span class="line">date: 1970-01-01</span><br><span class="line">tags:</span><br><span class="line"><span class="section">  - private  # 使用 tags 中配置的密码(此处密码为 123456)</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li><p><strong>定期更新 Hexo</strong>: Hexo 和其插件可能会定期更新, 你可以使用以下命令来更新它们: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此, 你已经成功搭建了一个基于 <strong>GitHub + Hexo</strong> 的个人博客.你可以定期添加新内容、更新博客并使用 GitHub Pages 进行托管.通过自定义主题和插件, 你可以让博客具有更好的外观和功能.</p>]]></content>
      
      
      <categories>
          
          <category> 基于github+hexo的博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Post</title>
      <link href="/2025/01/11/My-First-Post/"/>
      <url>/2025/01/11/My-First-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1970/01/01/hello-world/"/>
      <url>/1970/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
